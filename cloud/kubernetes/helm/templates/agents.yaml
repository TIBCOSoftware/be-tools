{{- range $i, $agent := .Values.agents }}
{{- if gt (int $agent.replicas) 0 }}
{{- $ssName := (printf "%s-%s" $.Release.Name $agent.name) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $ssName }}
spec:
  replicas: {{ $agent.replicas }}
  selector:
    matchLabels:
      name: {{ $ssName }}
{{ include "becharts.labels" $agent | trim | indent 6 }}
  serviceName: {{ $ssName }}-headless
  template:
    metadata:
      labels:
        name: {{ $ssName }}
{{ include "becharts.labels" $agent | trim | indent 8 }}
        {{- if $agent.cacheStorageEnabled }}
        cacheagent: "yes"
        {{- end }}
        {{- if and $.Values.apispecservice.enabled $agent.apiSpecServer }}
        apispecserver: "yes"
        {{- end }}
    spec:
{{ include "pullsecrets" $ | trim | indent 6 }}
      {{- if eq $.Values.cmType "ignite"}}
      serviceAccount: {{ $.Release.Name }}-ignite
      {{- end }}
{{- if or (eq ($agent.podAntiAffinity).enabled true ) (eq ($agent.podAffinity).enabled true ) }}
      affinity:
{{ include "becharts.antiaffinity" $agent | trim | indent 8 }}
{{ include "becharts.affinity" $agent | trim | indent 8 }}
{{- end }}
      containers:
      - name: {{ $agent.name }}-container
        image: {{ $.Values.image }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        {{- if or (not (empty $.Values.envVarsFromConfigMaps)) (not (empty $.Values.envVarsFromSecrets)) (not (empty $.Values.configs)) }}
        envFrom:
        {{- if $.Values.configs }}
        - configMapRef:
            name: {{ $.Release.Name }}-configmap
        {{- end}}
        {{- range $configMapName := $.Values.envVarsFromConfigMaps }}
        - configMapRef:
            name: {{ $configMapName }}
        {{- end }}
        {{- range $secretName := $.Values.envVarsFromSecrets }}
        - secretRef:
            name: {{ $secretName }}
        {{- end }}
        {{- end }}
        env:
        - name: PU
          value: {{ $agent.PU }}
        - name: ENGINE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DOCKER_HOST
          value: "$(ENGINE_NAME).{{ $ssName }}-headless.{{ $.Release.Namespace }}.svc.cluster.local"
        {{- if $.Values.apispecservice.enabled }}
        - name: "tra.be.engine.api.spec.enable"
          value: "true"
        {{- if $.Values.apispecservice.port }}
        - name: "tra.be.engine.http.ping.port"
          value: "{{ $.Values.apispecservice.port }}"
        {{- end }}
        {{- end }}
        {{- range $envKey, $envVal := $.Values.envVars }}
        - name: "{{ $envKey }}"
          value: "{{ $envVal }}"
        {{- end}}
{{ include "bechart.discovery.env" $ | trim | indent 8 }}
        {{- if and (not (empty $.Values.mysql.backingstoreUrlGV)) $.Values.mysql.enabled }}
        - name: {{ $.Values.mysql.backingstoreUrlGV }}
          value: "jdbc:mysql://{{ $.Release.Name }}-mysql:3306/{{ $.Values.mysql.auth.database }}"
        {{- end }}
        {{- if $.Values.influxdb.enabled }}
        - name: {{ $.Values.influxdb.influxdbUrlGV }}
          value: "http://{{ $.Release.Name }}-influxdb:8086"
        {{- end }}
        {{- if $.Values.oihr.enabled }}
        - name: HawkEnabled
          value: "true"
        - name: tra.be.hawk.hma.transport
          value: "tibtcp"
        - name: HMA_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: tra.be.hawk.hma.tcp.self.url
          value: $(HMA_POD_IP):2856
        - name: tra.be.hawk.hma.tcp.agent.ami.url
          value: "{{$.Values.oihr.hkAgentUrl}}"
        {{- else }}
        - name: HawkEnabled
          value: "false"
        {{- end }}
{{ include "bechart.resourceLimits" $agent | trim | indent 8 }}
{{ include "healthcheck" $ | trim | indent 8 }}
{{ include "bechart.volumeMounts" $ | trim | indent 8 }}
{{- if $.Values.persistence.scSupportsReadWriteMany }}
{{ include "bechart.volumes" $ | trim | indent 6 }}
{{- else }}
{{ include "bechart.volumeClaimTemplates" $ | trim | indent 2 }}
{{- end }}
---
{{- end }}
{{- end }}
