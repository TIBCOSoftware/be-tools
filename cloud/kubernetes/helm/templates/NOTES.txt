Thank you for using {{ .Chart.Name }}.

TIBCO BusinessEvents application has been deployed with the following details:

Release name:              {{ .Release.Name }}
Cloud provider:            {{ .Values.cpType }}
Cluster provider:          {{ .Values.cmType }}
API spec server:           {{ if .Values.apispecservice.enabled }}enabled{{ else }}not enabled{{ end }}
Hot deployments:           {{ if .Values.enableRMS }}enabled{{ else }}not enabled{{ end }}
This is a RMS deployment:  {{ if .Values.rmsDeployment }}yes{{ else }}no{{ end }}
HAWK Micro Agent           {{ if .Values.oihr.enabled }}enabled{{ else }}not enabled{{ end }}

Following services have been exposed for external access:
{{- if .Values.apispecservice.enabled }}
  Service name: {{ .Release.Name }}-apispec-service
    {{ .Release.Name }}'s asyncapi specs can be accessed through this service at the end-point path: "/asyncapi"
    To connect to this service from outside the cluster, use below details:
      {{- if contains "NodePort" .Values.apispecservice.type }}
      echo NODE_IP: $(kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
      echo NODE_PORT: $(kubectl get -o jsonpath="{.spec.ports[0].nodePort}" services {{ .Release.Name }}-apispec-service)
      {{- else if contains "LoadBalancer" .Values.apispecservice.type }}
      NOTE: It may take a few minutes for the LoadBalancer IP to be available.
            Watch the status with: 'kubectl get svc -w {{ .Release.Name }}-apispec-service'
      echo SERVICE_IP: $(kubectl get svc {{ .Release.Name }}-apispec-service --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
      {{- else if contains "ClusterIP" .Values.apispecservice.type }}
      NOTE: This service type is ClusterIP. Execute the following command to forward local port to this service, so that you can access it on localhost:{{ .Values.apispecservice.port }}
      kubectl port-forward svc/{{ .Release.Name }}-apispec-service {{ .Values.apispecservice.port | default 8180 }}
      {{- end }}
{{ end }}
{{- range $i, $agent := .Values.agents }}
{{- range $j, $service := $agent.expose }}
{{- $serviceName := printf "%s-%s-%s" $.Release.Name $agent.name $service.name }}
  Service name: {{ $serviceName }}
    To connect to this service from outside the cluster, use below details:
    {{- if contains "NodePort" $service.type }}
    echo NODE_IP: $(kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
    echo NODE_PORT: $(kubectl get -o jsonpath="{.spec.ports[0].nodePort}" services {{ $serviceName }})
    {{- else if contains "LoadBalancer" $service.type }}
    NOTE: It may take a few minutes for the LoadBalancer IP to be available.
          Watch the status with: 'kubectl get svc -w {{ $serviceName }}'
    echo SERVICE_IP: $(kubectl get svc {{ $serviceName }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
    {{- else if contains "ClusterIP" $service.type }}
    NOTE: This service type is ClusterIP. Execute the following command to forward local port to this service, so that you can access it on localhost:{{ $service.port }}
    kubectl port-forward svc/{{ $serviceName }} {{ $service.port }}
    {{- end }}
{{ end }}
{{- end }}
Following services have been exposed for JMX based management and monitoring of respective pods:
  {{- $clWidth := 30 }}
  {{- $cl0StringLen := len "Service name" }}
  {{- $cl0spaces := sub $clWidth $cl0StringLen }}
  {{- $cl1StringLen := len "POD name" }}
  {{- $cl1spaces := sub $clWidth $cl1StringLen }}
  Service name {{- " " | repeat (int $cl0spaces) -}} POD name {{- " " | repeat (int $cl1spaces) -}} POD's FQDN
{{- range $i, $agent := .Values.agents }}
{{- range $j, $e := until (int $agent.replicas) }}
{{- $ssName := (printf "%s-%s" $.Release.Name $agent.name) }}
{{- $podName := printf "%s-%d" $ssName $j }}
{{- $serviceName := printf "%s-%d-jmx" $ssName $j }}
{{- $fqdn := printf "%s-%d.%s-headless.%s.svc.cluster.local" $ssName $j $ssName $.Release.Namespace }}
  {{- $cl0StringLen = len $serviceName }}
  {{- $cl0spaces = sub $clWidth $cl0StringLen }}
  {{- if lt $cl0spaces 0 }} {{ $cl0spaces = 0}} {{ end }}
  {{- $cl1StringLen := len $podName }}
  {{- $cl1spaces := sub $clWidth $cl1StringLen }}
  {{- if lt $cl1spaces 0 }} {{ $cl1spaces = 0}} {{ end }}
  {{ $serviceName }} {{- " " | repeat (int $cl0spaces) -}} {{ $podName }} {{- " " | repeat (int $cl1spaces) -}} {{ $fqdn }}
{{- end }}
{{- end }}

  NOTE: These services are of type ClusterIP and JMX process running inside each pod binds to its FQDN (Fully Qualified Domain Name).
  To connect to any JMX process from your local machine using tools like "jconsole", update your "/etc/hosts" file
  with respective pod's FQDN, forward traffic from local machine to pod using kubectl port-forward & and use FQDN in the jconsole.
  {{- $firstAgent := $.Values.agents | first }}
  {{- $ssName := (printf "%s-%s" $.Release.Name $firstAgent.name) }}
  {{- $podName := printf "%s-%d" $ssName 0 }}
  {{- $serviceName := printf "%s-%d-jmx" $ssName 0 }}
  {{- $fqdn := printf "%s-%d.%s-headless.%s.svc.cluster.local" $ssName 0 $ssName $.Release.Namespace }}
  Example: To connect to the JMX process running inside the pod [{{ $podName }}], use below details.
  1. Add "127.0.0.1 {{$fqdn}}" to your local "/etc/hosts" file.
  2. kubectl port-forward svc/{{$serviceName}} 5555
  3. Use URL "{{$fqdn}}:5555" to connect using "jconsole"